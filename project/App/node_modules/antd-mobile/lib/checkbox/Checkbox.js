'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactNative = require('react-native');

var _index = require('./style/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var PropTypes = React.PropTypes;

var Checkbox = function (_React$Component) {
    (0, _inherits3["default"])(Checkbox, _React$Component);

    function Checkbox(props, context) {
        (0, _classCallCheck3["default"])(this, Checkbox);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props, context));

        _this.handleClick = function () {
            if (_this.props.disabled) {
                return;
            }
            _this.toggle();
        };
        var checked = 'checked' in props ? props.checked : props.defaultChecked;
        _this.state = {
            checked: checked
        };
        return _this;
    }

    Checkbox.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
        if ('checked' in nextProps) {
            var oldChecked = this.state.checked;
            if (nextProps.checked === oldChecked) {
                return;
            }
            this.setState({
                checked: nextProps.checked
            });
        }
    };

    Checkbox.prototype.toggle = function toggle() {
        var checked = !this.state.checked;
        this.setState({
            checked: checked
        });
        if (this.props.onChange) {
            this.props.onChange(checked);
        }
    };

    Checkbox.prototype.render = function render() {
        var _props = this.props;
        var style = _props.style;
        var disabled = _props.disabled;

        var checked = this.state.checked;
        var imgSrc = void 0;
        if (checked) {
            if (disabled) {
                imgSrc = require('./image/checked_disable.png');
            } else {
                imgSrc = require('./image/checked.png');
            }
        } else {
            if (disabled) {
                imgSrc = require('./image/normal_disable.png');
            } else {
                imgSrc = require('./image/normal.png');
            }
        }
        return React.createElement(
            _reactNative.TouchableWithoutFeedback,
            { onPress: this.handleClick },
            React.createElement(_reactNative.Image, { source: imgSrc, style: [_index2["default"].icon, style] })
        );
    };

    return Checkbox;
}(React.Component);

exports["default"] = Checkbox;

Checkbox.propTypes = {
    style: PropTypes.any,
    checked: PropTypes.bool,
    defaultChecked: PropTypes.bool,
    disabled: PropTypes.bool,
    onChange: PropTypes.func
};
module.exports = exports['default'];