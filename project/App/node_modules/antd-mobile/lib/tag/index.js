'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactNative = require('react-native');

var _index = require('./style/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Modal = function (_React$Component) {
    (0, _inherits3["default"])(Modal, _React$Component);

    function Modal(props) {
        (0, _classCallCheck3["default"])(this, Modal);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

        _this.onClick = function () {
            var _this$props = _this.props;
            var disabled = _this$props.disabled;
            var onChange = _this$props.onChange;

            if (disabled) {
                return;
            }
            var isSelect = _this.state.selected;
            _this.setState({
                selected: !isSelect
            }, function () {
                onChange(!isSelect);
            });
        };
        _this.state = {
            selected: props.selected,
            closed: false
        };
        return _this;
    }

    Modal.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.selected !== nextProps.selected) {
            this.setState({
                selected: nextProps.selected
            });
        }
    };

    Modal.prototype.render = function render() {
        var _props = this.props;
        var children = _props.children;
        var disabled = _props.disabled;
        var style = _props.style;

        var selected = this.state.selected;
        var wrapStyle = void 0;
        var textStyle = void 0;
        if (!selected && !disabled) {
            wrapStyle = _index2["default"].normalWrap;
            textStyle = _index2["default"].normalText;
        }
        if (selected && !disabled) {
            wrapStyle = _index2["default"].activeWrap;
            textStyle = _index2["default"].activeText;
        }
        if (disabled) {
            wrapStyle = _index2["default"].disabledWrap;
            textStyle = _index2["default"].disabledText;
        }
        return React.createElement(
            _reactNative.View,
            { style: [_index2["default"].tag, style] },
            React.createElement(
                _reactNative.TouchableWithoutFeedback,
                { onPress: this.onClick },
                React.createElement(
                    _reactNative.View,
                    { style: [_index2["default"].wrap, wrapStyle] },
                    React.createElement(
                        _reactNative.Text,
                        { style: [_index2["default"].text, textStyle] },
                        children,
                        ' '
                    )
                )
            )
        );
    };

    return Modal;
}(React.Component);

exports["default"] = Modal;

Modal.defaultProps = {
    disabled: false,
    selected: false,
    onChange: function onChange() {}
};
module.exports = exports['default'];